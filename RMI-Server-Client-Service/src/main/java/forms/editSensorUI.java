/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forms;

import java.util.List;
import java.util.Vector;

import javax.swing.JComboBox;

import dtos.FireAlarmSensor;
import interfaces.IFireAlarmService;
import response.models.FireAlarmSensorMultipleResponse;
import response.models.FireAlarmSensorSingleResponse;
import rmi.client.Client;


import java.awt.event.ActionListener;
import java.rmi.RemoteException;
import java.awt.event.ActionEvent;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JTextField;
import java.awt.Color;
import java.awt.Font;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JButton;
import java.awt.SystemColor;

/**
 *
 *  @author Supun Randima Wijekoon
 */
public class editSensorUI extends javax.swing.JFrame {
	
    private IFireAlarmService stub = null;
	private Client client = new Client();
	private List<FireAlarmSensor> list;
	private FireAlarmSensor fireAlarmSensor;
	
    /**
     * Creates new form editSensorUI
     */
    public editSensorUI() {
        
        // get RMI client
        this.stub = client.getStub();
        // get alarm sensor details from RMI
        this.getData();
        initComponents();
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    }

    public void getData() {
    	try {
    	    // get alarm sensor details from RMI
    		FireAlarmSensorMultipleResponse res = this.stub.getFireAlarmSensorList();
    		// set alarm list
        	this.list = res.getData();
        	
        	System.out.println(res.getStatus());
    	} catch (Exception e) {
			// TODO: handle exception
		}
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtRoomNo = new javax.swing.JTextField();
        txtFloorNo = new javax.swing.JTextField();
        btnHome = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        rdbtnActive = new JRadioButton("Active");
        rdbtnActive.setFont(new Font("Tahoma", Font.PLAIN, 14));
        rdbtnActive.setToolTipText("Sensor is in active status");
        rdbtnInactive = new JRadioButton("Inactive");
        rdbtnInactive.setFont(new Font("Tahoma", Font.PLAIN, 14));
        rdbtnInactive.setToolTipText("Sensor is in inactive status");
        
        btnUpdate.addActionListener(new ActionListener() {
        	@SuppressWarnings("null")
			public void actionPerformed(ActionEvent arg0) {
        		String floorNo = txtFloorNo.getText().toString();
        		String roomNo = txtRoomNo.getText().toString();
        		Boolean status;
        		
        		// check status button is clicked or not
        		if(rdbtnActive.isSelected()) {
        			status = true;
        		}else {
        			status = false;
        		}
        		
        		// Database id
        		String uniqueId = fireAlarmSensor.get_id();
        		System.out.println(uniqueId + " " + status +" "+ Integer.parseInt(floorNo));
        		
        		// get the roomNo and floorNo from inputs
        		int fNo = Integer.parseInt(floorNo.trim());
        		int rNo = Integer.parseInt(roomNo.trim());
        		 
        		// set the values in fireAlarmSensor model
        		fireAlarmSensor.setFloor_no(fNo);
        		fireAlarmSensor.setRoom_no(rNo);
        		fireAlarmSensor.setStatus(status);
        		
        	    try {
        	    	// update the new fireAlarmSensor details using RMI server
        	    	FireAlarmSensorSingleResponse response = stub.updateFireAlarmSensor(fireAlarmSensor, uniqueId);
        	    	// show the response and show success message
        	    	System.out.println(response);
        	    	JOptionPane.showMessageDialog(null, "Succesfully Updated");
				} catch (RemoteException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} 
        	}
        });
        jLabel3 = new javax.swing.JLabel();
       
        final JComboBox listSensors = new JComboBox();
        listSensors.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        		JComboBox c = (JComboBox) arg0.getSource();
        	    Item item = (Item) c.getSelectedItem();
        	    
        	    // assign selected item         	       	    
        	    // get values from all sensors list 
        	    fireAlarmSensor =  list.get(item.getId());
        	    
        	    //  assign values to text field
        	    txtFloorNo.setText(Integer.toString(fireAlarmSensor.getFloor_no()));
        	    txtRoomNo.setText(Integer.toString(fireAlarmSensor.getRoom_no()));
        	    
        	    String status = "Not Active";
        	    System.out.println(fireAlarmSensor.isStatus() == true);

        		// set the connection between btnActive and btnInactive
        	    if(fireAlarmSensor.isStatus() == true) {	//if status is true make the rdbtnActive selected
        	    	rdbtnInactive.setSelected(false);
        	    	rdbtnActive.setSelected(true);
        	    }
        	    else { 	//if status is false make the rdbtninActive selected
        	    	rdbtnActive.setSelected(false);
        	    	rdbtnInactive.setSelected(true);
        	    }
        	    
        	    System.out.println(item.getId() + " : " + item.getDescription());
        	}
        });
       
        
        int index = 0;
        Vector model = new Vector();
    
        for (FireAlarmSensor s : this.list) {
        	// add sensors values in lists sensors
           listSensors.addItem(new Item( index++ , "Floor No: " + s.getFloor_no() + ", Room No: " + s.getRoom_no() ));
        }
        

        btnDelete = new javax.swing.JButton();
        btnDelete.addActionListener(new ActionListener() {
        	// delete a sensor
        	public void actionPerformed(ActionEvent e) {
        		// get selected item details
        		String uniqueId = fireAlarmSensor.get_id();        	
        		
        		// show message request from user to delete 
        		int result = JOptionPane.showConfirmDialog( null, "Do you want to delete ?",
        		"alert", JOptionPane.OK_CANCEL_OPTION);
        		System.out.println(result);
        		
        		if(result == 0) { // if user accepted to delete 
        		
        	    try {
        	    	// delete selected sensor from list by using RMI server
        	    	FireAlarmSensorSingleResponse response = stub.deleteFireAlarmSensor(uniqueId);
        	    	JOptionPane.showMessageDialog(null, response.getStatus());
        	    	
        	    	// update sensors list 
        	    	List<FireAlarmSensor> list;
        	    	Client client = new Client();
    				IFireAlarmService stub = null;
    				stub = client.getStub();
    				FireAlarmSensorMultipleResponse res;
    				
    				try {
    					
    				 	
    			      
    			        Vector model = new Vector();
    			        
    			        // remove all items in current list
    			        int itemCount = listSensors.getItemCount();
    			        System.out.println("size"  +itemCount);
    			        int i =0;
    			        while(i <= itemCount) {
    			        	System.out.println("Item " + i);
    			        	int x = i+1;
    			        	System.out.println(listSensors.getItemAt(i));
    			        	listSensors.removeItemAt(i);
    			        	
    			        }
    			        // get new sensors details after deleteing
    			        res = stub.getFireAlarmSensorList();
    				 	list = res.getData();
    				 	System.out.println(list.size());
    				 	
    				 	int index = 0;
    			        for (FireAlarmSensor s : list) {
    			        	// add newly updated sensors list values
    			        	System.out.println(index);
    			           listSensors.addItem(new Item( index++ , "Floor No: " + s.getFloor_no() + ", Room No: " + s.getRoom_no() ));
    			        }
    				 	
    				}catch (Exception e2) {
						// TODO: handle exception
    					System.out.println(e2.getMessage());
					}
				} catch (RemoteException ex) {
					// TODO Auto-generated catch block
					ex.printStackTrace();
				} 
        		}
        		
        	}
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setPreferredSize(new java.awt.Dimension(948, 602));

        jLabel10.setFont(new java.awt.Font("Sitka Display", 1, 24)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Edit Fire Alarm");

        jLabel1.setFont(new java.awt.Font("Sylfaen", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Floor Number");

        jLabel2.setFont(new java.awt.Font("Sylfaen", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Room Number");

        txtRoomNo.setBackground(new java.awt.Color(204, 204, 204));
        txtRoomNo.setFont(new java.awt.Font("Sylfaen", 0, 18)); // NOI18N
        txtRoomNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        txtFloorNo.setBackground(new java.awt.Color(204, 204, 204));
        txtFloorNo.setFont(new java.awt.Font("Sylfaen", 0, 18)); // NOI18N

        btnHome.setBackground(new java.awt.Color(0, 0, 0));
        btnHome.setForeground(new java.awt.Color(255, 255, 255));
        btnHome.setText("Home");
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(0, 0, 0));
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");

        jLabel3.setFont(new java.awt.Font("Sylfaen", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Sensor");

        listSensors.setFont(new java.awt.Font("Sylfaen", 0, 18)); // NOI18N

        
        
    
        btnDelete.setBackground(new java.awt.Color(255, 0, 0));
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        
        lblStatus = new JLabel();
        lblStatus.setText("Status");
        lblStatus.setForeground(Color.WHITE);
        lblStatus.setFont(new Font("Sylfaen", Font.PLAIN, 18));
        
        
        rdbtnActive.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		if(rdbtnActive.isSelected()) {
        			rdbtnInactive.setSelected(false);
        		}
        	}
        });
        rdbtnActive.setBackground(Color.LIGHT_GRAY);
        
       
        rdbtnInactive.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		if(rdbtnInactive.isSelected()) { 	// if rdbtnInctive selected make the rdbtnActive unselected
        			rdbtnActive.setSelected(false);
        		}
        	}
        });
        rdbtnInactive.setBackground(Color.LIGHT_GRAY);
        
        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addGap(161)
        			.addComponent(jLabel10)
        			.addContainerGap(165, Short.MAX_VALUE))
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addGap(54)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addComponent(btnUpdate, GroupLayout.PREFERRED_SIZE, 113, GroupLayout.PREFERRED_SIZE)
        					.addGap(30)
        					.addComponent(btnDelete, GroupLayout.PREFERRED_SIZE, 113, GroupLayout.PREFERRED_SIZE)
        					.addGap(18)
        					.addComponent(btnHome, GroupLayout.PREFERRED_SIZE, 113, GroupLayout.PREFERRED_SIZE)
        					.addGap(43))
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(jLabel2)
        						.addGroup(jPanel1Layout.createSequentialGroup()
        							.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(jLabel3)
        								.addComponent(jLabel1)
        								.addComponent(lblStatus, GroupLayout.PREFERRED_SIZE, 109, GroupLayout.PREFERRED_SIZE))
        							.addGap(44)
        							.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(listSensors, 0, 228, Short.MAX_VALUE)
        								.addComponent(txtFloorNo, GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
        								.addComponent(txtRoomNo, GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
        								.addGroup(jPanel1Layout.createSequentialGroup()
        									.addComponent(rdbtnActive, GroupLayout.PREFERRED_SIZE, 75, GroupLayout.PREFERRED_SIZE)
        									.addPreferredGap(ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
        									.addComponent(rdbtnInactive, GroupLayout.PREFERRED_SIZE, 78, GroupLayout.PREFERRED_SIZE)
        									.addGap(40)))))
        					.addContainerGap(49, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
        	jPanel1Layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(jPanel1Layout.createSequentialGroup()
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(jPanel1Layout.createSequentialGroup()
        					.addGap(58)
        					.addComponent(jLabel10)
        					.addGap(71))
        				.addGroup(Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
        					.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
        						.addComponent(listSensors, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        					.addGap(18)))
        			.addGap(18)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblStatus, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        				.addComponent(rdbtnActive)
        				.addComponent(rdbtnInactive))
        			.addGap(32)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(txtFloorNo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jLabel1))
        			.addGap(24)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel2)
        				.addComponent(txtRoomNo, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGap(50)
        			.addGroup(jPanel1Layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(btnUpdate, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
        				.addComponent(btnDelete, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE)
        				.addComponent(btnHome, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE))
        			.addGap(47))
        );
        jPanel1.setLayout(jPanel1Layout);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE)
        			.addContainerGap())
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, 449, Short.MAX_VALUE)
        			.addContainerGap())
        );
        getContentPane().setLayout(layout);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new mainUI().setVisible(true); 
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(editSensorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(editSensorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(editSensorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(editSensorUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new editSensorUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JComboBox<String> listSensors;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtRoomNo;
    private javax.swing.JTextField txtFloorNo;
    private JLabel lblStatus;
    private JRadioButton rdbtnInactive;
    private JRadioButton rdbtnActive;
}

// set selected sensor values in Item model
class Item
{
    private int  id;
    private String description;

    public Item(int id, String description)
    {
        this.id = id;
        this.description = description;
    }

    public int getId()
    {
        return id;
    }

    public String getDescription()
    {
        return description;
    }

    public String toString()
    {
        return description;
    }
}
